# Updated loop_controller.py with logging
import sys
from file_agent import read_file, write_file
from runner import run_command
from gemini_client import propose_fix
from logger import setup_logger

logger = setup_logger("loop_controller")

def fix_file_loop(path, proxy_url, test_cmd, max_attempts=3):
    """
    Loop: read code, run test, if fail propose fix, write, retry.
    test_cmd can be a list or string for subprocess.
    """
    for attempt in range(1, max_attempts+1):
        logger.info(f"Attempt {attempt}/{max_attempts} for {path}")
        code = read_file(path)
        ret, out, err = run_command(test_cmd)
        if ret == 0:
            logger.info("Tests passed. No fix needed.")
            return True
        logger.error(f"Error on attempt {attempt}: {err}")
        fix = propose_fix(proxy_url, code, err)
        if not fix.strip():
            logger.warning("No fix proposed. Stopping.")
            return False
        try:
            write_file(path, fix)
            logger.info(f"Applied fix to {path}")
        except Exception as e:
            logger.error(f"Failed to write file {path}: {e}")
            return False
    logger.error("Reached max attempts without passing tests.")
    return False

if __name__ == '__main__':
    if len(sys.argv) < 4:
        logger.error("Usage: python loop_controller.py <script.py> <proxy_url> <test_command> [max_attempts]")
        sys.exit(1)
    script = sys.argv[1]
    proxy = sys.argv[2].rstrip('/')
    test = sys.argv[3]
    attempts = int(sys.argv[4]) if len(sys.argv) > 4 else 3
    success = fix_file_loop(script, proxy, test, attempts)
    sys.exit(0 if success else 1)

# Updated swarm.py with logging
import argparse
import threading
from task_queue import TaskQueue
from loop_controller import fix_file_loop
from logger import setup_logger

logger = setup_logger("swarm")

def worker(queue, proxy_url, test_cmd, max_attempts):
    while True:
        path = queue.pop()
        if path is None:
            logger.info(f"{threading.current_thread().name} received shutdown signal.")
            break
        logger.info(f"[{threading.current_thread().name}] Processing {path}")
        success = fix_file_loop(path, proxy_url, test_cmd, max_attempts)
        logger.info(f"[{threading.current_thread().name}] Finished {path}: {'Success' if success else 'Failure'}")


def main():
    parser = argparse.ArgumentParser(description="Gemini Swarm Debugger")
    parser.add_argument("action", choices=["fix"], help="Action to perform: fix")
    parser.add_argument("files", nargs="+", help="List of Python files to debug and fix")
    parser.add_argument("--proxy", default="http://localhost:3000", help="URL of the Gemini Flask proxy")
    parser.add_argument("--test-cmd", required=True, help="Command to test the file, e.g., 'pytest tests' or 'python script.py'")
    parser.add_argument("--attempts", type=int, default=3, help="Max fix attempts per file")
    parser.add_argument("--workers", type=int, default=2, help="Number of parallel worker threads")
    args = parser.parse_args()

    if args.action == "fix":
        queue = TaskQueue()
        for f in args.files:
            queue.push(f)
        # Push sentinel None for each worker to exit
        for _ in range(args.workers):
            queue.push(None)

        threads = []
        for i in range(args.workers):
            t = threading.Thread(
                target=worker,
                args=(queue, args.proxy, args.test_cmd, args.attempts),
                name=f"Worker-{i+1}"
            )
            t.start()
            threads.append(t)

        for t in threads:
            t.join()
        logger.info("All workers have finished.")
    else:
        parser.error("Unsupported action. Use 'fix'.")


if __name__ == "__main__":
    main()